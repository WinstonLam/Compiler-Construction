#include "civic.h"

void printIntVec(int[n] vec ) {   
               
    for (int i = 0, n) {     
        printInt(vec[i]);
        printNewlines(1);
    }
}

void printFloatVec(float[n] vec ) {    
               
    for (int i = 0, n) {     
        printFloat(vec[i]);
        printNewlines(1);   
    }
}

void printIntMat(int[m,n] mat ) {
    
    for (int i = 0, m) {
        for (int j = 0, n) {
            printInt(mat[i,j]);
          printSpaces(1);
        }
         printNewlines(1);  
    }
}

void printFloatMat(float[m,n] mat ) {
    
    for (int i = 0, m) {
        for (int j = 0, n) {
            printFloat(mat[i,j]);
            printSpaces(1);
           
        }
         printNewlines(1);   
    }
}

void scanIntVec(int[n] vec) {
    for (int i = 0, n) {
        scanInt();
    }
}

void scanFloatVec(float[n] vec) {
    for (int i = 0, n) {
        scanFloat();
    }
}

void scanIntMat( int[m,n] mat ) {
    for (int i = 0, m){
        for (int i=0, n){
            scanInt();
        }
    }
}

void scanFloatMat( float[m,n] mat ) {
    for (int i = 0, m){
        for (int i=0, n){
            scanFloat();
        }
    }
}

void matMul( float[m,n ] a, float[o,p ] b, float[q,l ] c ) {

    for (int i = 0, m){
        for (int j=0 , n){
            c[i,j] = a[i,j] * b[i,j];
        }
    }
}


export int main() {
    int[3] vec = [1,2,3];
    float[3] vecf = [1.0, 2.0, 3.0];
    int[2,2] mat = [[1,2], [3,4]];
    float[2,2] matf = [[1.0,2.0], [3.0,4.0]];
    float[2,2] matf2;
    


    // printIntVec(vec);
    // printFloatVec(vecf);
    // printIntMat(mat);
    // printFloatMat(matf);
    // scanIntVec(vec);
    // scanFloatVec(vecf);
    scanIntMat(mat);
    scanFloatMat(matf);
    matMul(matf, matf, matf2);
    printFloatMat(matf2);
    
    return 0;
}
